'''
******* 문제 푼 후 느낀 것 *********
위상정렬은 그래프가 순환하지 않을때만 성립한다.
순환관계가 생기면 그 순서를 정확히 파악할 수 없기 때문이다.

특이한 점은 진입차수를 가지고 있어야 한다는 것이다. 처음에는 왜 간선을 지우지 않고, 진입차수로 관리하나 생각했는데,
(진입차수는 A->B 로 갈때 B 의 진입차수가 증가한다.)
간선을 지우게 되면 생각보다 비용이 클것같다. 
deque 로 관리하면 그렇지 않겠지만 그냥 list 로 관리하면 pop 하는 경우 O(N) 이 걸리기 때문이라고 생각한다.

dfs로 풀이하는 것 또한 가능하다. 
'''

'''
2022/07/27
boj.kr/2252
줄 세우기

문제 :
N명의 학생들을 키 순서대로 줄을 세우려고 한다. 각 학생의 키를 직접 재서 정렬하면 간단하겠지만, 
마땅한 방법이 없어서 두 학생의 키를 비교하는 방법을 사용하기로 하였다. 그나마도 모든 학생들을 다 비교해 본 것이 아니고, 일부 학생들의 키만을 비교해 보았다.

일부 학생들의 키를 비교한 결과가 주어졌을 때, 줄을 세우는 프로그램을 작성하시오.

입력 :
첫째 줄에 N(1 ≤ N ≤ 32,000), M(1 ≤ M ≤ 100,000)이 주어진다. M은 키를 비교한 회수이다. 
다음 M개의 줄에는 키를 비교한 두 학생의 번호 A, B가 주어진다. 이는 학생 A가 학생 B의 앞에 서야 한다는 의미이다.

학생들의 번호는 1번부터 N번이다.

결과 :
첫째 줄에 학생들을 앞에서부터 줄을 세운 결과를 출력한다. 답이 여러 가지인 경우에는 아무거나 출력한다.
'''
import sys
from collections import deque
input = sys.stdin.readline

N, M = map(int, input().split())

graph = [[]] + [[] for _ in range(N)] 
in_degree = [0] + [0 for _ in range(N)]

for _ in range(M):
    A, B = map(int, input().split())
    graph[A].append(B)
    in_degree[B] += 1

# 큐에 진입차수가 0인 것들을 먼저 넣는다. 
# 진입차수가 0 이라는 것은 가장 최상단에 있다는 것이기 때문이다.
q = deque()
for i in range(1,N+1):
    if in_degree[i] == 0 :
        q.append(i)

result = []

# q 에서 아이템들을 꺼내가면서 해당 정점에서 다른 곳으로 가는 간선을 확인하여
# 진입 차수를 빼준다.
while(q):
    v = q.popleft()
    result.append(v)
    for next_v in graph[v]:
        in_degree[next_v] -= 1
        # 빼준 이후 진입차수가 0이면 이제 앞에 있는 것들이 더 없으므로 q에 넣는다
        if in_degree[next_v] == 0 :
            q.append(next_v)

print(*result)
    



