'''
******* 문제 푼 후 느낀 것 *********
최소 스패닝 트리와 다익스트라의 차이점에 대해 알 수 있었다.
최소 스패닝 트리는 가중치가 음수가 있어도 상관이 없이 돌아가고, 모든 노드를 연결하는 방법에 대해 적용된다.
다익스트라는 모든 노드가 아닌, 특정 노드에서 출발하여 특정 종료 지점이 존재하는 경우 적용할 수 있다. 
계속해서 특정 시작점에서 특정 지점까지의 최소 거리를 업데이트 하기 때문이다. 

두 방식 모두 우선순위 큐를 이용할 수 있다. 이때 다익스트라는 큐에 넣을때 시작점에서 현재까지의 최소거리를 넣고,
프림알고리즘은 전체적인 시점에서 보았을때 최소거리인 것을 먼저 선택하기 떄문에 현재 노드에서 갈 수 있는 노드와, 그 거리를 넣는다.
그러면 우선순위 큐에 의해 알아서 거리가 가장 짧은 것이 먼저 선택되게 된다.

'''

'''
2022/07/22
boj.kr/1197
최소 스패닝 트리

문제 :
그래프가 주어졌을 때, 그 그래프의 최소 스패닝 트리를 구하는 프로그램을 작성하시오.

최소 스패닝 트리는, 주어진 그래프의 모든 정점들을 연결하는 부분 그래프 중에서 그 가중치의 합이 최소인 트리를 말한다.

입력 :
첫째 줄에 정점의 개수 V(1 ≤ V ≤ 10,000)와 간선의 개수 E(1 ≤ E ≤ 100,000)가 주어진다. 
다음 E개의 줄에는 각 간선에 대한 정보를 나타내는 세 정수 A, B, C가 주어진다. 

이는 A번 정점과 B번 정점이 가중치 C인 간선으로 연결되어 있다는 의미이다. 
C는 음수일 수도 있으며, 절댓값이 1,000,000을 넘지 않는다.

그래프의 정점은 1번부터 V번까지 번호가 매겨져 있고, 임의의 두 정점 사이에 경로가 있다. 
최소 스패닝 트리의 가중치가 -2,147,483,648보다 크거나 같고, 2,147,483,647보다 작거나 같은 데이터만 입력으로 주어진다.

결과 :
첫째 줄에 최소 스패닝 트리의 가중치를 출력한다.
'''

import sys
import heapq
input = sys.stdin.readline


V, E = map(int, input().split())

graph = [[] for _ in range(V+1)]

for _ in range(E):
    s, e, d = map(int, input().split())
    graph[s].append((d,e))
    graph[e].append((d,s))

dist = 0
visit = [1] + [0 for _ in range(V)]
p_heap = [(0,1)] # cost, start

while(p_heap):
    cur_dist, cur_v = heapq.heappop(p_heap)
    if visit[cur_v]: continue
    visit[cur_v] = 1
    dist += cur_dist

    for next_dist, next_v in graph[cur_v]:
        heapq.heappush(p_heap, (next_dist, next_v))

print(dist)